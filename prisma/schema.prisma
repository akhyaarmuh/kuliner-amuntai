// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  full_name     String   @db.VarChar(75)
  email         String   @unique(map: "email_unique") @db.VarChar(128)
  password      String   @db.VarChar(225)
  refresh_token String?  @unique(map: "refresh_token_unique") @db.VarChar(750)
  status        Boolean  @default(true)
  shops         Shop[]

  created_at    DateTime @default(now()) @db.Timestamp(0)
  updated_at    DateTime @default(now()) @db.Timestamp(0)

  @@map("users")
}

model Shop {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(25)
  no_hp      String   @db.VarChar(13)
  user_id    Int
  address    Address?
  categories Category[]
  products   Product[]

  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)

  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "shop_to_user")

  @@map("shops")
}

model Address {
  shop_id     Int    @id
  country     String @db.VarChar(50)
  province    String @db.VarChar(50)
  city        String @db.VarChar(50)
  street      String @db.VarChar(100)
  postal_code String @db.VarChar(5)

  shop        Shop   @relation(fields: [shop_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "address_to_shop")

  @@map("addresses")
}

model Category {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(25)
  shop_id    Int
  products   Product[]

  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)

  shop       Shop     @relation(fields: [shop_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "category_to_shop")

  @@unique([shop_id, name], map: "name_unique")

  @@map("categories")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(70)
  description String?  @db.VarChar(150)
  shop_id     Int
  category_id Int

  created_at  DateTime @default(now()) @db.Timestamp(0)
  updated_at  DateTime @default(now()) @db.Timestamp(0)
  
  shop        Shop     @relation(fields: [shop_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_to_shop")
  category    Category @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "product_to_category")

  @@unique([shop_id, name], map: "name_unique")

  @@map("products")
}